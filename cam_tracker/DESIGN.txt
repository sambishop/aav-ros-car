                       *** Examples of CLI usage ***

# Capture the results of a new test and write the results in a new
# directory, relative to the current directory.  The pattern for the new
# directory is "test_%%%", where "%%%" is a zero-padded, right-justified
# number starting with 1.
$ cam_tracker capture

# Playback the previously captured test as recorded in the current
# directory.
$ cam_tracker playback

                         *** Multi-Threading ***
The number of threads used by the application depends on whether it is
operating in "playback" or "capture" mode.  Two threads are used in
"playback" mode: one that reads the file, and the main thread that does the
actual analysis work.  Three threads are used in "capture" mode: one
captures video from the camera, the main thread does the actual analysis
work, and the third thread writes the captured video to a file.

The threads form a chain of simple single-producer/single-consumer pairs.
Only pointers to images are passed between threads, and this is done using
standard Unix pipes.

                           *** Start Up ***
The cam_tracker application needs a few things in order to operate:

  1. The intrinsic camera parameters.
  2. The vertical distance between the ground and the camera.
  3. The distance between the camera and the on-the-ground center point in
     its vision.
  4. The on-the-ground distance from directly below the camera, the same as
     in item #2 above, to the on-the-ground center point referenced in item
     #3.
  5. An image of the ground, without the car.
  6. An image of the car.
  7. The GPS coordinates of the on-the-ground center point referenced in
     items #3 and #4.

Item #5, the ground image, is captured at the beginning of each test and
stored in a file called "ground.jpg".  Item #6, the car image, can be
reused between tests.  It is stored in a file called "car.jpg".

                           *** Operation ***
The main thread does the following with each image from the stream:

  1. Search for the center of the ground image.
  2. Search for the center of the car image and determine the direction it
     is facing.
  3. Calculate the position of the car's center, taking into account any
     shift in the ground image.
  4. Publish the car's pose (position and direction) on a ROS topic.

